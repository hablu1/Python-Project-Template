{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastVector Template For Python Projects This is a template for Python projects. What you get: Source code and test code is seperated in different directories. Different tasks seperated by Make tasks. External libraries installed and managed by Pip . Setup for tests using Pytest . Bechmark tests using Pytest-Benchmark Continuous testing with Travis-CI . Code coverage reports, including automatic upload to Codecov . Code documentation with Sphinx . Example of own Python package with the use of Cython Optional: Use of VSCode with the Python and UnitTest extension. Structure \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_benchmark_computations.py \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 build \u2502 \u2502 \u2514\u2500\u2500 html... \u2502 \u2514\u2500\u2500 source \u2502 \u2502 \u2514\u2500\u2500 conf.py \u251c\u2500\u2500 fastvector \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 vector.py \u2502 \u2514\u2500\u2500 computations.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 test_computations.py \u2514\u2500\u2500 test_vector.py The name of the example package is called fastvector. Sources of the package go in fastvector/ ,tests go in tests/ and benchmarks go in benchmarks/ .","title":"Start"},{"location":"#fastvector","text":"","title":"FastVector"},{"location":"#template-for-python-projects","text":"This is a template for Python projects. What you get: Source code and test code is seperated in different directories. Different tasks seperated by Make tasks. External libraries installed and managed by Pip . Setup for tests using Pytest . Bechmark tests using Pytest-Benchmark Continuous testing with Travis-CI . Code coverage reports, including automatic upload to Codecov . Code documentation with Sphinx . Example of own Python package with the use of Cython Optional: Use of VSCode with the Python and UnitTest extension.","title":"Template For Python Projects"},{"location":"#structure","text":"\u251c\u2500\u2500 Makefile \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_benchmark_computations.py \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 build \u2502 \u2502 \u2514\u2500\u2500 html... \u2502 \u2514\u2500\u2500 source \u2502 \u2502 \u2514\u2500\u2500 conf.py \u251c\u2500\u2500 fastvector \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 vector.py \u2502 \u2514\u2500\u2500 computations.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 test_computations.py \u2514\u2500\u2500 test_vector.py The name of the example package is called fastvector. Sources of the package go in fastvector/ ,tests go in tests/ and benchmarks go in benchmarks/ .","title":"Structure"},{"location":"api/","text":"Reference Computations Functions Vector computations. cython_clip_vector ( vector_in , min_value , max_value , vector_out ) Clip the vector values by optimized cython code. Parameters: Name Type Description Default vector_in VectorND Input vector. required min_value Union[int, float] Real number. required max_value Union[int, float] Real number. required vector_out VectorND Output vector. required Exceptions: Type Description ValueError If min_value is larger than max_value. Source code in fastvector\\computations.py def cython_clip_vector ( vector_in : VectorND , min_value : Number , max_value : Number , vector_out : VectorND ) -> None : \"\"\"Clip the vector values by optimized cython code. Args: vector_in (VectorND): Input vector. min_value (Number): Real number. max_value (Number): Real number. vector_out (VectorND): Output vector. Raises: ValueError: If min_value is larger than max_value. \"\"\" VectorND . check_vector_types ( vector_in ) VectorND . check_vector_types ( vector_out ) VectorND . check_numeric_argument ( min_value ) VectorND . check_numeric_argument ( max_value ) if min_value > max_value : raise ValueError ( \"min_value must be <= max_value\" ) _cython_clip_vector ( vector_in . values , min_value , max_value , vector_out . values ) naive_cython_clip_vector ( vector_in , min_value , max_value , vector_out ) Clip the vector values by naive cython code. Parameters: Name Type Description Default vector_in VectorND Input vector. required min_value Union[int, float] Real number. required max_value Union[int, float] Real number. required vector_out VectorND Output vector. required Exceptions: Type Description ValueError If min_value is larger than max_value. Source code in fastvector\\computations.py def naive_cython_clip_vector ( vector_in : VectorND , min_value : Number , max_value : Number , vector_out : VectorND ) -> None : \"\"\"Clip the vector values by naive cython code. Args: vector_in (VectorND): Input vector. min_value (Number): Real number. max_value (Number): Real number. vector_out (VectorND): Output vector. Raises: ValueError: If min_value is larger than max_value. \"\"\" VectorND . check_vector_types ( vector_in ) VectorND . check_vector_types ( vector_out ) VectorND . check_numeric_argument ( min_value ) VectorND . check_numeric_argument ( max_value ) if min_value > max_value : raise ValueError ( \"min_value must be <= max_value\" ) _naive_cython_clip_vector ( vector_in . values , min_value , max_value , vector_out . values ) python_clip_vector ( vector_in , min_value , max_value , vector_out ) Clip the vector values by plain python code Parameters: Name Type Description Default vector_in VectorND Input vector. required min_value Union[int, float] Real number. required max_value Union[int, float] Real number. required vector_out VectorND Output vector. required Exceptions: Type Description ValueError If min_value is larger than max_value. Source code in fastvector\\computations.py def python_clip_vector ( vector_in : VectorND , min_value : Number , max_value : Number , vector_out : VectorND ) -> None : \"\"\"Clip the vector values by plain python code Args: vector_in (VectorND): Input vector. min_value (Number): Real number. max_value (Number): Real number. vector_out (VectorND): Output vector. Raises: ValueError: If min_value is larger than max_value. \"\"\" VectorND . check_vector_types ( vector_in ) VectorND . check_vector_types ( vector_out ) VectorND . check_numeric_argument ( min_value ) VectorND . check_numeric_argument ( max_value ) if min_value > max_value : raise ValueError ( \"min_value must be <= max_value\" ) for i in range ( len ( vector_in )): # pylint: disable=consider-using-enumerate vector_out [ i ] = min ( max ( vector_in [ i ], min_value ), max_value ) Dtypes Vector Class Own implementation of a ND vector class. VectorND VectorND class to perform simple vector operations. __abs__ ( self ) special Return the length (magnitude) of the vector instance. Returns: Type Description float float: Length of the vector instance. Source code in fastvector\\vector.py def __abs__ ( self ) -> float : \"\"\"Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. \"\"\" square_sum = sum ([ val ** 2.0 for val in self . values ]) return sqrt ( square_sum ) __add__ ( self , other_vector ) special Returns the additon vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description VectorND VectorND: The additon vector of the self and the other vector instance. Source code in fastvector\\vector.py def __add__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Returns the additon vector of the self and the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: VectorND: The additon vector of the self and the other vector instance. \"\"\" self . check_vector_types ( other_vector ) add_result = [ self_val + other_val for self_val , other_val in zip ( self . values , other_vector . values )] return VectorND ( add_result ) __bool__ ( self ) special Return the truth value of the vector instance. Returns: Type Description bool bool: True, if the vector is not the Null-vector. False, else. Source code in fastvector\\vector.py def __bool__ ( self ) -> bool : \"\"\"Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. \"\"\" return bool ( abs ( self )) __call__ ( self ) special Callable for the vector instance representation. Returns: Type Description str str: The representation of the vector instance. Source code in fastvector\\vector.py def __call__ ( self ) -> str : \"\"\"Callable for the vector instance representation. Returns: str: The representation of the vector instance. \"\"\" return self . __repr__ () __eq__ ( self , other_vector ) special Check if the vector instances have the same values. Parameters: Name Type Description Default other_vector Any Other vector instance (right-hand-side of the operator) required Returns: Type Description bool bool: True, if the both vector instances have the same values. False, else. Source code in fastvector\\vector.py def __eq__ ( self , other_vector : Any ) -> bool : \"\"\"Check if the vector instances have the same values. Args: other_vector (Any): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. \"\"\" self . check_vector_types ( other_vector ) is_equal = False if self . values == other_vector . values : is_equal = True return is_equal __ge__ ( self , other , NotImplemented = NotImplemented ) special Return a >= b. Computed by @total_ordering from (not a < b). Source code in fastvector\\vector.py def _ge_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a >= b. Computed by @total_ordering from (not a < b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result __getitem__ ( self , idx ) special Return the vector item at index idx. Parameters: Name Type Description Default idx int The index idx required Exceptions: Type Description IndexError If idx >= len. Returns: Type Description Number Number: If idx < len: returns the value. IndexError, else. Source code in fastvector\\vector.py def __getitem__ ( self , idx : int ) -> Number : \"\"\"Return the vector item at index idx. Args: idx (int): The index idx Raises: IndexError: If idx >= len. Returns: Number: If idx < len: returns the value. IndexError, else. \"\"\" if 0 <= idx < len ( self ): return self . values [ idx ] raise IndexError ( 'Invalid index value!' ) __gt__ ( self , other , NotImplemented = NotImplemented ) special Return a > b. Computed by @total_ordering from (not a < b) and (a != b). Source code in fastvector\\vector.py def _gt_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a > b. Computed by @total_ordering from (not a < b) and (a != b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result and self != other __init__ ( self , * args , * , dtype = 'd' ) special Create a vector instance with the given x and y values. Parameters: Name Type Description Default args Any The vector values. () dtype Any The dtype of the underlying array. Defaults to float64. 'd' Exceptions: Type Description TypeError If x or y are not a number. Source code in fastvector\\vector.py def __init__ ( self , * args : Any , dtype : Any = float64 ): \"\"\"Create a vector instance with the given x and y values. Args: args (Any): The vector values. dtype (Any, optional): The dtype of the underlying array. Defaults to float64. Raises: TypeError: If x or y are not a number. \"\"\" # Values are passed in as a list if len ( args ) == 1 and isinstance ( args [ 0 ], list ): self . values = array . array ( dtype , args [ 0 ]) # Values are passed in as optinal arguments elif len ( args ) > 0 : values = [ val for val in args ] # pylint: disable=unnecessary-comprehension self . values = array . array ( dtype , values ) else : raise TypeError ( 'You must pass in an list of numbers, or numbers as a args tuple!' ) __le__ ( self , other , NotImplemented = NotImplemented ) special Return a <= b. Computed by @total_ordering from (a < b) or (a == b). Source code in fastvector\\vector.py def _le_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a <= b. Computed by @total_ordering from (a < b) or (a == b).' op_result = self . __lt__ ( other ) return op_result or self == other __len__ ( self ) special Return the length of the vector. Returns: Type Description int int: The vector length. Source code in fastvector\\vector.py def __len__ ( self ) -> int : \"\"\"Return the length of the vector. Returns: int: The vector length. \"\"\" return len ( self . values ) __lt__ ( self , other_vector ) special Check if the self instance is less than the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description bool bool: True, if the self instance is less than the other vector instance. False, else. Source code in fastvector\\vector.py def __lt__ ( self , other_vector : VectorND ) -> bool : \"\"\"Check if the self instance is less than the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. \"\"\" self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than __mul__ ( self , other ) special Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Union[VectorND, Number] Other vector instance or scaler value (right-hand-side of the operator) required Exceptions: Type Description TypeError [description] Returns: Type Description Union[VectorND, Number] Union[VectorND, Number]: The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector\\vector.py def __mul__ ( self , other : Union [ VectorND , Number ]) -> Union [ VectorND , Number ]: \"\"\"Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[VectorND, Number]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: [description] Returns: Union[VectorND, Number]: The multiplication of the self vector and the other vector(or number) instance. \"\"\" if isinstance ( other , VectorND ): vector_dot = sum ([ self_val * other_val for self_val , other_val in zip ( self . values , other . values )]) return vector_dot if isinstance ( other , numbers . Real ): vector_mul = [ val * other for val in self . values ] return VectorND ( vector_mul ) raise TypeError ( 'You must pass in a vector instance or an int/float number!' ,) __repr__ ( self ) special Return the vector instance representation. Returns: Type Description str str: The representation of the vector instance. Source code in fastvector\\vector.py def __repr__ ( self ) -> str : \"\"\"Return the vector instance representation. Returns: str: The representation of the vector instance. \"\"\" return f 'vector.VectorND( { self . values } )' __setitem__ ( self , idx , val ) special Returns the vector item at index idx. Parameters: Name Type Description Default idx int The index idx. required val Number The new value at index idx. required Exceptions: Type Description IndexError If idx >= len. Source code in fastvector\\vector.py def __setitem__ ( self , idx : int , val : Number ) -> None : \"\"\"Returns the vector item at index idx. Args: idx (int): The index idx. val (Number): The new value at index idx. Raises: IndexError: If idx >= len. \"\"\" if 0 <= idx < len ( self ): self . values [ idx ] = val else : raise IndexError ( 'Invalid index value!' ) __str__ ( self ) special The vector instance as a string. Returns: Type Description str str: The vector instance as a string. Source code in fastvector\\vector.py def __str__ ( self ) -> str : \"\"\"The vector instance as a string. Returns: str: The vector instance as a string. \"\"\" return f '( { self . values } )' __sub__ ( self , other_vector ) special Return the subtraction vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description VectorND VectorND: The subtraction vector of the self and the other vector instance. Source code in fastvector\\vector.py def __sub__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Return the subtraction vector of the self and the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: VectorND: The subtraction vector of the self and the other vector instance. \"\"\" self . check_vector_types ( other_vector ) sub_result = [ self_val - other_val for self_val , other_val in zip ( self . values , other_vector . values )] return VectorND ( sub_result ) __truediv__ ( self , other ) special Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Number Other vector instance or scaler value (right-hand-side of the operator). required Exceptions: Type Description ValueError [description] TypeError [description] Returns: Type Description VectorND VectorND: The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector\\vector.py def __truediv__ ( self , other : Number ) -> VectorND : \"\"\"Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Number): Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: [description] TypeError: [description] Returns: VectorND: The multiplication of the self vector and the other vector(or number) instance. \"\"\" if isinstance ( other , numbers . Real ): if other != 0.0 : vector_div = [ val / other for val in self . values ] return VectorND ( vector_div ) raise ValueError ( 'You cannot divide by zero!' ) raise TypeError ( 'You must pass in an int/float value!' ) check_numeric_argument ( argument ) staticmethod Check if the argument is a numeric value. Parameters: Name Type Description Default argument Number Argument to check. required Exceptions: Type Description TypeError If the argument is not of type numbers.Real. Source code in fastvector\\vector.py @staticmethod def check_numeric_argument ( argument : Number ) -> None : \"\"\"Check if the argument is a numeric value. Args: argument (Number): Argument to check. Raises: TypeError: If the argument is not of type numbers.Real. \"\"\" if not isinstance ( argument , numbers . Real ): raise TypeError ( 'You must pass in an int/float value!' ) check_vector_types ( vector ) staticmethod Check if the vector is an instance of the VectorND class. Parameters: Name Type Description Default vector VectorND A vector instance. required Exceptions: Type Description TypeError If vector is not an instance of the VectorND class. Source code in fastvector\\vector.py @staticmethod def check_vector_types ( vector : VectorND ) -> None : \"\"\"Check if the vector is an instance of the VectorND class. Args: vector (VectorND): A vector instance. Raises: TypeError: If vector is not an instance of the VectorND class. \"\"\" if not isinstance ( vector , VectorND ): raise TypeError ( 'You have to pass in two instances of the vector class!' ) Version","title":"API"},{"location":"api/#reference","text":"","title":"Reference"},{"location":"api/#computations-functions","text":"","title":"Computations Functions"},{"location":"api/#fastvector.computations","text":"Vector computations.","title":"fastvector.computations"},{"location":"api/#fastvector.computations.cython_clip_vector","text":"Clip the vector values by optimized cython code. Parameters: Name Type Description Default vector_in VectorND Input vector. required min_value Union[int, float] Real number. required max_value Union[int, float] Real number. required vector_out VectorND Output vector. required Exceptions: Type Description ValueError If min_value is larger than max_value. Source code in fastvector\\computations.py def cython_clip_vector ( vector_in : VectorND , min_value : Number , max_value : Number , vector_out : VectorND ) -> None : \"\"\"Clip the vector values by optimized cython code. Args: vector_in (VectorND): Input vector. min_value (Number): Real number. max_value (Number): Real number. vector_out (VectorND): Output vector. Raises: ValueError: If min_value is larger than max_value. \"\"\" VectorND . check_vector_types ( vector_in ) VectorND . check_vector_types ( vector_out ) VectorND . check_numeric_argument ( min_value ) VectorND . check_numeric_argument ( max_value ) if min_value > max_value : raise ValueError ( \"min_value must be <= max_value\" ) _cython_clip_vector ( vector_in . values , min_value , max_value , vector_out . values )","title":"cython_clip_vector()"},{"location":"api/#fastvector.computations.naive_cython_clip_vector","text":"Clip the vector values by naive cython code. Parameters: Name Type Description Default vector_in VectorND Input vector. required min_value Union[int, float] Real number. required max_value Union[int, float] Real number. required vector_out VectorND Output vector. required Exceptions: Type Description ValueError If min_value is larger than max_value. Source code in fastvector\\computations.py def naive_cython_clip_vector ( vector_in : VectorND , min_value : Number , max_value : Number , vector_out : VectorND ) -> None : \"\"\"Clip the vector values by naive cython code. Args: vector_in (VectorND): Input vector. min_value (Number): Real number. max_value (Number): Real number. vector_out (VectorND): Output vector. Raises: ValueError: If min_value is larger than max_value. \"\"\" VectorND . check_vector_types ( vector_in ) VectorND . check_vector_types ( vector_out ) VectorND . check_numeric_argument ( min_value ) VectorND . check_numeric_argument ( max_value ) if min_value > max_value : raise ValueError ( \"min_value must be <= max_value\" ) _naive_cython_clip_vector ( vector_in . values , min_value , max_value , vector_out . values )","title":"naive_cython_clip_vector()"},{"location":"api/#fastvector.computations.python_clip_vector","text":"Clip the vector values by plain python code Parameters: Name Type Description Default vector_in VectorND Input vector. required min_value Union[int, float] Real number. required max_value Union[int, float] Real number. required vector_out VectorND Output vector. required Exceptions: Type Description ValueError If min_value is larger than max_value. Source code in fastvector\\computations.py def python_clip_vector ( vector_in : VectorND , min_value : Number , max_value : Number , vector_out : VectorND ) -> None : \"\"\"Clip the vector values by plain python code Args: vector_in (VectorND): Input vector. min_value (Number): Real number. max_value (Number): Real number. vector_out (VectorND): Output vector. Raises: ValueError: If min_value is larger than max_value. \"\"\" VectorND . check_vector_types ( vector_in ) VectorND . check_vector_types ( vector_out ) VectorND . check_numeric_argument ( min_value ) VectorND . check_numeric_argument ( max_value ) if min_value > max_value : raise ValueError ( \"min_value must be <= max_value\" ) for i in range ( len ( vector_in )): # pylint: disable=consider-using-enumerate vector_out [ i ] = min ( max ( vector_in [ i ], min_value ), max_value )","title":"python_clip_vector()"},{"location":"api/#dtypes","text":"","title":"Dtypes"},{"location":"api/#fastvector.dtypes","text":"","title":"fastvector.dtypes"},{"location":"api/#vector-class","text":"","title":"Vector Class"},{"location":"api/#fastvector.vector","text":"Own implementation of a ND vector class.","title":"fastvector.vector"},{"location":"api/#fastvector.vector.VectorND","text":"VectorND class to perform simple vector operations.","title":"VectorND"},{"location":"api/#fastvector.vector.VectorND.__abs__","text":"Return the length (magnitude) of the vector instance. Returns: Type Description float float: Length of the vector instance. Source code in fastvector\\vector.py def __abs__ ( self ) -> float : \"\"\"Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. \"\"\" square_sum = sum ([ val ** 2.0 for val in self . values ]) return sqrt ( square_sum )","title":"__abs__()"},{"location":"api/#fastvector.vector.VectorND.__add__","text":"Returns the additon vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description VectorND VectorND: The additon vector of the self and the other vector instance. Source code in fastvector\\vector.py def __add__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Returns the additon vector of the self and the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: VectorND: The additon vector of the self and the other vector instance. \"\"\" self . check_vector_types ( other_vector ) add_result = [ self_val + other_val for self_val , other_val in zip ( self . values , other_vector . values )] return VectorND ( add_result )","title":"__add__()"},{"location":"api/#fastvector.vector.VectorND.__bool__","text":"Return the truth value of the vector instance. Returns: Type Description bool bool: True, if the vector is not the Null-vector. False, else. Source code in fastvector\\vector.py def __bool__ ( self ) -> bool : \"\"\"Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. \"\"\" return bool ( abs ( self ))","title":"__bool__()"},{"location":"api/#fastvector.vector.VectorND.__call__","text":"Callable for the vector instance representation. Returns: Type Description str str: The representation of the vector instance. Source code in fastvector\\vector.py def __call__ ( self ) -> str : \"\"\"Callable for the vector instance representation. Returns: str: The representation of the vector instance. \"\"\" return self . __repr__ ()","title":"__call__()"},{"location":"api/#fastvector.vector.VectorND.__eq__","text":"Check if the vector instances have the same values. Parameters: Name Type Description Default other_vector Any Other vector instance (right-hand-side of the operator) required Returns: Type Description bool bool: True, if the both vector instances have the same values. False, else. Source code in fastvector\\vector.py def __eq__ ( self , other_vector : Any ) -> bool : \"\"\"Check if the vector instances have the same values. Args: other_vector (Any): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. \"\"\" self . check_vector_types ( other_vector ) is_equal = False if self . values == other_vector . values : is_equal = True return is_equal","title":"__eq__()"},{"location":"api/#fastvector.vector.VectorND.__ge__","text":"Return a >= b. Computed by @total_ordering from (not a < b). Source code in fastvector\\vector.py def _ge_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a >= b. Computed by @total_ordering from (not a < b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result","title":"__ge__()"},{"location":"api/#fastvector.vector.VectorND.__getitem__","text":"Return the vector item at index idx. Parameters: Name Type Description Default idx int The index idx required Exceptions: Type Description IndexError If idx >= len. Returns: Type Description Number Number: If idx < len: returns the value. IndexError, else. Source code in fastvector\\vector.py def __getitem__ ( self , idx : int ) -> Number : \"\"\"Return the vector item at index idx. Args: idx (int): The index idx Raises: IndexError: If idx >= len. Returns: Number: If idx < len: returns the value. IndexError, else. \"\"\" if 0 <= idx < len ( self ): return self . values [ idx ] raise IndexError ( 'Invalid index value!' )","title":"__getitem__()"},{"location":"api/#fastvector.vector.VectorND.__gt__","text":"Return a > b. Computed by @total_ordering from (not a < b) and (a != b). Source code in fastvector\\vector.py def _gt_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a > b. Computed by @total_ordering from (not a < b) and (a != b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result and self != other","title":"__gt__()"},{"location":"api/#fastvector.vector.VectorND.__init__","text":"Create a vector instance with the given x and y values. Parameters: Name Type Description Default args Any The vector values. () dtype Any The dtype of the underlying array. Defaults to float64. 'd' Exceptions: Type Description TypeError If x or y are not a number. Source code in fastvector\\vector.py def __init__ ( self , * args : Any , dtype : Any = float64 ): \"\"\"Create a vector instance with the given x and y values. Args: args (Any): The vector values. dtype (Any, optional): The dtype of the underlying array. Defaults to float64. Raises: TypeError: If x or y are not a number. \"\"\" # Values are passed in as a list if len ( args ) == 1 and isinstance ( args [ 0 ], list ): self . values = array . array ( dtype , args [ 0 ]) # Values are passed in as optinal arguments elif len ( args ) > 0 : values = [ val for val in args ] # pylint: disable=unnecessary-comprehension self . values = array . array ( dtype , values ) else : raise TypeError ( 'You must pass in an list of numbers, or numbers as a args tuple!' )","title":"__init__()"},{"location":"api/#fastvector.vector.VectorND.__le__","text":"Return a <= b. Computed by @total_ordering from (a < b) or (a == b). Source code in fastvector\\vector.py def _le_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a <= b. Computed by @total_ordering from (a < b) or (a == b).' op_result = self . __lt__ ( other ) return op_result or self == other","title":"__le__()"},{"location":"api/#fastvector.vector.VectorND.__len__","text":"Return the length of the vector. Returns: Type Description int int: The vector length. Source code in fastvector\\vector.py def __len__ ( self ) -> int : \"\"\"Return the length of the vector. Returns: int: The vector length. \"\"\" return len ( self . values )","title":"__len__()"},{"location":"api/#fastvector.vector.VectorND.__lt__","text":"Check if the self instance is less than the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description bool bool: True, if the self instance is less than the other vector instance. False, else. Source code in fastvector\\vector.py def __lt__ ( self , other_vector : VectorND ) -> bool : \"\"\"Check if the self instance is less than the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. \"\"\" self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than","title":"__lt__()"},{"location":"api/#fastvector.vector.VectorND.__mul__","text":"Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Union[VectorND, Number] Other vector instance or scaler value (right-hand-side of the operator) required Exceptions: Type Description TypeError [description] Returns: Type Description Union[VectorND, Number] Union[VectorND, Number]: The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector\\vector.py def __mul__ ( self , other : Union [ VectorND , Number ]) -> Union [ VectorND , Number ]: \"\"\"Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[VectorND, Number]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: [description] Returns: Union[VectorND, Number]: The multiplication of the self vector and the other vector(or number) instance. \"\"\" if isinstance ( other , VectorND ): vector_dot = sum ([ self_val * other_val for self_val , other_val in zip ( self . values , other . values )]) return vector_dot if isinstance ( other , numbers . Real ): vector_mul = [ val * other for val in self . values ] return VectorND ( vector_mul ) raise TypeError ( 'You must pass in a vector instance or an int/float number!' ,)","title":"__mul__()"},{"location":"api/#fastvector.vector.VectorND.__repr__","text":"Return the vector instance representation. Returns: Type Description str str: The representation of the vector instance. Source code in fastvector\\vector.py def __repr__ ( self ) -> str : \"\"\"Return the vector instance representation. Returns: str: The representation of the vector instance. \"\"\" return f 'vector.VectorND( { self . values } )'","title":"__repr__()"},{"location":"api/#fastvector.vector.VectorND.__setitem__","text":"Returns the vector item at index idx. Parameters: Name Type Description Default idx int The index idx. required val Number The new value at index idx. required Exceptions: Type Description IndexError If idx >= len. Source code in fastvector\\vector.py def __setitem__ ( self , idx : int , val : Number ) -> None : \"\"\"Returns the vector item at index idx. Args: idx (int): The index idx. val (Number): The new value at index idx. Raises: IndexError: If idx >= len. \"\"\" if 0 <= idx < len ( self ): self . values [ idx ] = val else : raise IndexError ( 'Invalid index value!' )","title":"__setitem__()"},{"location":"api/#fastvector.vector.VectorND.__str__","text":"The vector instance as a string. Returns: Type Description str str: The vector instance as a string. Source code in fastvector\\vector.py def __str__ ( self ) -> str : \"\"\"The vector instance as a string. Returns: str: The vector instance as a string. \"\"\" return f '( { self . values } )'","title":"__str__()"},{"location":"api/#fastvector.vector.VectorND.__sub__","text":"Return the subtraction vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description VectorND VectorND: The subtraction vector of the self and the other vector instance. Source code in fastvector\\vector.py def __sub__ ( self , other_vector : VectorND ) -> VectorND : \"\"\"Return the subtraction vector of the self and the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: VectorND: The subtraction vector of the self and the other vector instance. \"\"\" self . check_vector_types ( other_vector ) sub_result = [ self_val - other_val for self_val , other_val in zip ( self . values , other_vector . values )] return VectorND ( sub_result )","title":"__sub__()"},{"location":"api/#fastvector.vector.VectorND.__truediv__","text":"Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Number Other vector instance or scaler value (right-hand-side of the operator). required Exceptions: Type Description ValueError [description] TypeError [description] Returns: Type Description VectorND VectorND: The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector\\vector.py def __truediv__ ( self , other : Number ) -> VectorND : \"\"\"Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Number): Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: [description] TypeError: [description] Returns: VectorND: The multiplication of the self vector and the other vector(or number) instance. \"\"\" if isinstance ( other , numbers . Real ): if other != 0.0 : vector_div = [ val / other for val in self . values ] return VectorND ( vector_div ) raise ValueError ( 'You cannot divide by zero!' ) raise TypeError ( 'You must pass in an int/float value!' )","title":"__truediv__()"},{"location":"api/#fastvector.vector.VectorND.check_numeric_argument","text":"Check if the argument is a numeric value. Parameters: Name Type Description Default argument Number Argument to check. required Exceptions: Type Description TypeError If the argument is not of type numbers.Real. Source code in fastvector\\vector.py @staticmethod def check_numeric_argument ( argument : Number ) -> None : \"\"\"Check if the argument is a numeric value. Args: argument (Number): Argument to check. Raises: TypeError: If the argument is not of type numbers.Real. \"\"\" if not isinstance ( argument , numbers . Real ): raise TypeError ( 'You must pass in an int/float value!' )","title":"check_numeric_argument()"},{"location":"api/#fastvector.vector.VectorND.check_vector_types","text":"Check if the vector is an instance of the VectorND class. Parameters: Name Type Description Default vector VectorND A vector instance. required Exceptions: Type Description TypeError If vector is not an instance of the VectorND class. Source code in fastvector\\vector.py @staticmethod def check_vector_types ( vector : VectorND ) -> None : \"\"\"Check if the vector is an instance of the VectorND class. Args: vector (VectorND): A vector instance. Raises: TypeError: If vector is not an instance of the VectorND class. \"\"\" if not isinstance ( vector , VectorND ): raise TypeError ( 'You have to pass in two instances of the vector class!' )","title":"check_vector_types()"},{"location":"api/#version","text":"","title":"Version"},{"location":"api/#fastvector.version","text":"","title":"fastvector.version"}]}